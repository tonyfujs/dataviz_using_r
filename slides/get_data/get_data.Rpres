Get data
========================================================
transition: rotate
transition-speed: slow
width: 1440
height: 900
incremental: true
date: `r format(Sys.Date(), format="%B %d, %Y")`
css: ../theme/my_style.css

```{r setup, echo=FALSE}
opts_chunk$set(cache = FALSE, fig.align = 'right')
library(foreign)
```


Package
========================================================
incremental: false

__R package__ is the __equivalent__ of a smartphone __app__.     
     
Allows you to do more stuff.

***

![](../tof/smartphone.jpg)


R & Rstudio
========================================================
incremental: false

![](../tof/rstudio.png)


Get data: The working directory
========================================================
incremental: false

Need to tell R where to look for
```{r, eval=FALSE}
getwd()
list.files()
list.files('./data')

setwd('./data')
getwd()
list.files()

setwd('..')
getwd()
```

Everything is an object
========================================================
incremental: false

Try this
```{r, eval=FALSE}
my_files <- list.files('./data')
my_files
my_files[1]
```

Get data: Read .csv files
========================================================
incremental: false

Now that R knows where to look for, let's grab some data
```{r, eval=FALSE}
?read.csv
```

Get data: Read .csv files
========================================================
incremental: false

```{r, eval=FALSE}
read.csv('Alabama.csv') 

# What's wrong?
```

Get data: Read .csv files
========================================================
incremental: false

```{r, eval=FALSE}
read.csv('./data/Alabama.csv') 
```

Get data: Read .csv files
========================================================
incremental: false

```{r, eval=FALSE}
df <- read.csv('./data/Alabama.csv') 

# Check environment window
```

Get data: Read stata files
========================================================
incremental: false

```{r, eval=FALSE}
library(foreign)
df <- read.dta('./data/Alabama.dta')
```

Get data: Quick look
========================================================
incremental: false

```{r, eval=FALSE}
head(df)

# Get first 6 rows
```

Get data: Quick look
========================================================
incremental: false

```{r, eval=FALSE}
head(df, 10)

# Get first 10 rows
```

Get data: Quick look
========================================================
incremental: false

```{r, eval=FALSE}
summary(df)

# Summary stats
```

Get data: Quick look
========================================================
incremental: false

```{r, eval=FALSE}
str(df)

# Object structure
```

Get data: Quick look
========================================================
incremental: false

```{r, eval=FALSE}
View(df)

# Object structure
```

Get data: Indexing
========================================================
incremental: false

```{r, eval=FALSE}
df <- mtcars
df
# Using row / column number
df[1, ] # First row
df[ ,1] # First column
df[1, 1] # Top left cell
df[1:5, ] # First five rows
```

Get data: Indexing continued
========================================================
incremental: false

```{r, eval=FALSE}
# Using column names
df[ , 'mpg'] # First column
df[, c('gear', 'cyl')] # First 2 columns
df['Valiant', ] # Also works for rows
```

Get data: Crosstabs
========================================================
incremental: false

```{r, eval=FALSE}
# ftable command
ftable(df[, c('gear', 'cyl')])
ftable(df[, c('gear', 'cyl', 'carb')])
my_table <- ftable(df[, c('gear', 'cyl', 'carb')])
my_table
```

Get data: Crosstabs continued
========================================================
incremental: false

```{r, eval=FALSE}
library(gmodels)
CrossTable(df$gear, df$cyl)
```


END
========================================================
incremental: false


Get data: Crosstabs continued
========================================================
incremental: false

```{r, eval=FALSE}
prop.table(my_table) # cell percentages
prop.table(my_table, 1) # row percentages 
prop.table(my_table, 2) # column percentages
```

END
========================================================
incremental: false



Get data: Quick pick
========================================================
incremental: false

```{r, eval=FALSE}
df <- esoph
xtabs(~ alcgp, data = df)
xtabs(~ alcgp + tobgp, data = df)
my_table <- xtabs(ncases ~ alcgp + tobgp, data = df)
my_table

# Crosstabs
```

Get data: Quick pick
========================================================
incremental: false

```{r, eval=FALSE}
margin.table(my_table, 1) # rows total 
margin.table(my_table, 2) # columns total
prop.table(my_table) # cell percentages
prop.table(my_table, 1) # row percentages 
prop.table(my_table, 2) # column percentages

# Crosstabs continued
```

Get data: Quick pick
========================================================
incremental: false

```{r, eval=FALSE}
library(gmodels)
CrossTable(df$alcgp, df$tobgp)

# Crosstabs continued
```

Get data: Quick pick
========================================================
incremental: false

```{r, eval=FALSE}
df <- esoph
table(df$alcgp)
table(df$alcgp, df$tobgp)
summary(cars)

# Crosstabs
```


Clean data: Remove incomplete records
========================================================
incremental: false

```{r, eval=FALSE}
complete.cases(df) 

# logical vector
```

Clean data: Remove incomplete records
========================================================
incremental: false

```{r, eval=FALSE}
complete.cases(df) 

# logical vector
```

Clean data: Remove incomplete records
========================================================
incremental: false

```{r, eval=FALSE}
sum(complete.cases(df))

# ??? What happened here?
```

Clean data: Remove incomplete records
========================================================
incremental: false

```{r, eval=FALSE}
sum(complete.cases(df))

# What happened here?
# Why is it useful?
```

Clean data: Remove incomplete records
========================================================
incremental: false

Compute number of complete / missing records
```{r, eval=FALSE}
paste("The dataset contained", sum(complete.cases(df)), "complete records" )
```

Clean data: Remove incomplete records
========================================================
incremental: false

Remove incomplete records
```{r, eval=FALSE}
df <- subset(df, complete.cases(df))
```


Publishing results
========================================================
incremental: false

* Review .Rpres documents
* Time permitting: Review demo code
